% \iffalse meta-comment
%
%% File: l3text-purify.dtx
%
% Copyright (C) 2020-2023 The LaTeX Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "l3kernel bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/latex3/latex3
%
% for those people who are interested.
%
%<*driver>
\documentclass[full,kernel]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{^^A
%   The \textsf{l3text-purify} package: text processing (purification)^^A
% }
%
% \author{^^A
%  The \LaTeX{} Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \date{Released 2023-02-02}
%
% \maketitle
%
% \begin{documentation}
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{l3text-purify} implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%    \begin{macrocode}
%<@@=text>
%    \end{macrocode}
%
% \subsection{Purifying text}
%
% \begin{macro}[EXP]{\@@_if_recursion_tail_stop:N}
%   Functions to query recursion quarks.
%    \begin{macrocode}
\__kernel_quark_new_test:N \@@_if_recursion_tail_stop:N
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[EXP]{\text_purify:n, \@@_purify:n}
% \begin{macro}[EXP]{\@@_purify_store:n}
% \begin{macro}[EXP]{\@@_purify_store:nw}
% \begin{macro}[EXP]{\@@_purify_end:w}
% \begin{macro}[EXP]{\@@_purify_loop:w}
% \begin{macro}[EXP]{\@@_purify_group:n}
% \begin{macro}[EXP]{\@@_purify_space:w}
% \begin{macro}[EXP]{\@@_purify_N_type:N, \@@_purify_N_type_aux:N}
% \begin{macro}[EXP]{\@@_purify_math_search:NNN}
% \begin{macro}[EXP]{\@@_purify_math_start:NNw}
% \begin{macro}[EXP]{\@@_purify_math_store:n}
% \begin{macro}[EXP]{\@@_purify_math_store:nw}
% \begin{macro}[EXP]{\@@_purify_math_end:w}
% \begin{macro}[EXP]{\@@_purify_math_loop:NNw}
% \begin{macro}[EXP]{\@@_purify_math_N_type:NNN}
% \begin{macro}[EXP]{\@@_purify_math_group:NNn}
% \begin{macro}[EXP]{\@@_purify_math_space:NNw}
% \begin{macro}[EXP]{\@@_purify_math_cmd:N}
% \begin{macro}[EXP]{\@@_purify_math_cmd:NN}
% \begin{macro}[EXP]{\@@_purify_math_cmd:Nn}
% \begin{macro}[EXP]{\@@_purify_replace:N}
% \begin{macro}[EXP]{\@@_purify_replace:n}
% \begin{macro}[EXP]{\@@_purify_expand:N, \@@_purify_protect:N, \@@_purify_encoding:N}
% \begin{macro}[EXP]{\@@_purify_encoding_escape:NN}
%   As in the other parts of the module, we start off with a standard
%   \enquote{action} loop, with expansion applied up-front.
%    \begin{macrocode}
\cs_new:Npn \text_purify:n #1
  {
    \__kernel_exp_not:w \exp_after:wN
      {
        \exp:w
        \exp_args:Ne \@@_purify:n
          { \text_expand:n {#1} }
      }
  }
\cs_new:Npn \@@_purify:n #1
  {
    \group_align_safe_begin:
    \@@_purify_loop:w #1
      \q_@@_recursion_tail \q_@@_recursion_stop
    \@@_purify_result:n { }
  }
%    \end{macrocode}
%   As for expansion, collect up the tokens for future use.
%    \begin{macrocode}
\cs_new:Npn \@@_purify_store:n #1
  { \@@_purify_store:nw {#1} }
\cs_new:Npn \@@_purify_store:nw #1#2 \@@_purify_result:n #3
  { #2 \@@_purify_result:n { #3 #1 } }
\cs_new:Npn \@@_purify_end:w #1 \@@_purify_result:n #2
  {
    \group_align_safe_end:
    \exp_end:
    #2
  }
%    \end{macrocode}
%   The main loop is a standard \enquote{tl action}. Unlike the expansion
%   or case changing, here any groups have to be run inline. Most of the
%   business end is as before in the \texttt{N}-type token processing.
%    \begin{macrocode}
\cs_new:Npn \@@_purify_loop:w #1 \q_@@_recursion_stop
  {
    \tl_if_head_is_N_type:nTF {#1}
      { \@@_purify_N_type:N }
      {
        \tl_if_head_is_group:nTF {#1}
          { \@@_purify_group:n }
          { \@@_purify_space:w }
      }
    #1 \q_@@_recursion_stop
  }
\cs_new:Npn \@@_purify_group:n #1 { \@@_purify_loop:w #1 }
\exp_last_unbraced:NNo \cs_new:Npn \@@_purify_space:w \c_space_tl
  {
    \@@_purify_store:n { ~ }
    \@@_purify_loop:w
  }
%    \end{macrocode}
%   The first part of handling math mode is exactly the same as in the
%   other functions: look for a start-of-math mode token and if found start
%   a new loop tracking the closing token.
%    \begin{macrocode}
\cs_new:Npn \@@_purify_N_type:N #1
  {
    \@@_if_q_recursion_tail_stop_do:Nn #1 { \@@_purify_end:w }
    \@@_purify_N_type_aux:N #1
  }
\cs_new:Npn \@@_purify_N_type_aux:N #1
  {
    \exp_after:wN \@@_purify_math_search:NNN
      \exp_after:wN #1 \l_text_math_delims_tl
      \q_@@_recursion_tail ?
      \q_@@_recursion_stop
  }
\cs_new:Npn \@@_purify_math_search:NNN #1#2#3
  {
    \@@_if_q_recursion_tail_stop_do:Nn #2
      { \@@_purify_math_cmd:N #1 }
    \token_if_eq_meaning:NNTF #1 #2
      {
        \@@_use_i_delimit_by_q_recursion_stop:nw
           { \@@_purify_math_start:NNw #2 #3 }
      }
      { \@@_purify_math_search:NNN #1 }
  }
\cs_new:Npn \@@_purify_math_start:NNw #1#2#3 \q_@@_recursion_stop
  {
    \@@_purify_math_loop:NNw #1#2#3 \q_@@_recursion_stop
      \@@_purify_math_result:n { }
  }
\cs_new:Npn \@@_purify_math_store:n #1
  { \@@_purify_math_store:nw {#1} }
\cs_new:Npn \@@_purify_math_store:nw #1#2 \@@_purify_math_result:n #3
  { #2 \@@_purify_math_result:n { #3 #1 } }
\cs_new:Npn \@@_purify_math_end:w #1 \@@_purify_math_result:n #2
  {
    \@@_purify_store:n { $ #2 $ }
    \@@_purify_loop:w #1
  }
\cs_new:Npn \@@_purify_math_stop:Nw #1 \@@_purify_math_result:n #2
  {
    \@@_purify_store:n {#1#2}
    \@@_purify_end:w
  }
\cs_new:Npn \@@_purify_math_loop:NNw #1#2#3 \q_@@_recursion_stop
  {
    \tl_if_head_is_N_type:nTF {#3}
      { \@@_purify_math_N_type:NNN }
      {
        \tl_if_head_is_group:nTF {#3}
          { \@@_purify_math_group:NNn }
          { \@@_purify_math_space:NNw }
      }
        #1#2#3 \q_@@_recursion_stop
  }
\cs_new:Npn \@@_purify_math_N_type:NNN #1#2#3
  {
    \@@_if_q_recursion_tail_stop_do:Nn #3
      { \@@_purify_math_stop:Nw #1 }
    \token_if_eq_meaning:NNTF #3 #2
      { \@@_purify_math_end:w }
      {
        \@@_purify_math_store:n {#3}
        \@@_purify_math_loop:NNw #1#2
      }
  }
\cs_new:Npn \@@_purify_math_group:NNn #1#2#3
  {
    \@@_purify_math_store:n { {#3} }
    \@@_purify_math_loop:NNw #1#2
  }
\exp_after:wN \cs_new:Npn \exp_after:wN \@@_purify_math_space:NNw 
  \exp_after:wN # \exp_after:wN 1
  \exp_after:wN # \exp_after:wN 2 \c_space_tl
  {
    \@@_purify_math_store:n { ~ }
    \@@_purify_math_loop:NNw #1#2
  }
%    \end{macrocode}
%   Then handle math mode as an argument: same outcomes, different input
%   syntax.
%    \begin{macrocode}
\cs_new:Npn \@@_purify_math_cmd:N #1
  {
    \exp_after:wN \@@_purify_math_cmd:NN \exp_after:wN #1
      \l_text_math_arg_tl \q_@@_recursion_tail \q_@@_recursion_stop
  }
\cs_new:Npn \@@_purify_math_cmd:NN #1#2
  {
    \@@_if_q_recursion_tail_stop_do:Nn #2
      { \@@_purify_replace:N #1 }
    \cs_if_eq:NNTF #2 #1
      {
        \@@_use_i_delimit_by_q_recursion_stop:nw
          { \@@_purify_math_cmd:n }
      }
      { \@@_purify_math_cmd:NN #1 }
  }
\cs_new:Npn \@@_purify_math_cmd:n #1
  { \@@_purify_math_end:w \@@_purify_math_result:n {#1} }
%    \end{macrocode}
%   For \texttt{N}-type tokens, we first look for a string-context replacement
%   before anything else: this can therefore cover anything. Assuming we don't
%   find one, check to see if we can expand control sequences: if not, they have
%   to be dropped. We also allow for \LaTeXe{} \tn{protect}: there's an
%   assumption that we don't have |\protect { \oops }| or similar, but that's
%   also in the expansion code and seems like a reasonable balance.
%    \begin{macrocode}
\cs_new:Npn \@@_purify_replace:N #1
  {
    \bool_lazy_and:nnTF
      { \cs_if_exist_p:c { l_@@_purify_ \token_to_str:N #1 _tl } }
      {
        \bool_lazy_or_p:nn
          { \token_if_cs_p:N #1 }
          { \token_if_active_p:N #1 }
      }
      {
        \exp_args:Nv \@@_purify_replace:n
          { l_@@_purify_ \token_to_str:N #1 _tl }
      }
      {
        \token_if_cs:NTF #1
          { \@@_purify_expand:N #1 }
          {
            \exp_args:Ne \@@_purify_store:n
              { \@@_token_to_explicit:N #1 }
            \@@_purify_loop:w
          }
      }
  }
\cs_new:Npn \@@_purify_replace:n #1 { \@@_purify_loop:w #1 }
\cs_new:Npn \@@_purify_expand:N #1
  {
    \str_if_eq:nnTF {#1} { \protect }
      { \@@_purify_protect:N }
      { \@@_purify_encoding:N #1 }
  }
\cs_new:Npn \@@_purify_protect:N #1
  {
    \@@_if_q_recursion_tail_stop_do:Nn #1 { \@@_purify_end:w }
    \@@_purify_loop:w
  }
%    \end{macrocode}
%   Handle encoding commands, as detailed for expansion.
%    \begin{macrocode}
\cs_new:Npn \@@_purify_encoding:N #1
  {
    \bool_lazy_or:nnTF
      { \cs_if_eq_p:NN #1 \@current@cmd }
      { \cs_if_eq_p:NN #1 \@changed@cmd }
      { \@@_purify_encoding_escape:NN }
      {
        \@@_if_expandable:NTF #1
          { \exp_after:wN \@@_purify_loop:w #1 }
          { \@@_purify_loop:w }
      }
  }
\cs_new:Npn \@@_purify_encoding_escape:NN #1#2
  {
    \@@_purify_store:n {#1}
    \@@_purify_loop:w
  }
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   {
%     \text_declare_purify_equivalent:Nn,
%     \text_declare_purify_equivalent:Nx
%   }
%    \begin{macrocode}
\cs_new_protected:Npn \text_declare_purify_equivalent:Nn #1#2
  {
    \tl_clear_new:c { l_@@_purify_ \token_to_str:N #1 _tl }
    \tl_set:cn { l_@@_purify_ \token_to_str:N #1 _tl } {#2}
  }
\cs_generate_variant:Nn \text_declare_purify_equivalent:Nn { Nx }
%    \end{macrocode}
% \end{macro}
%
% Now pre-define a range of standard commands that need dedicated definitions
% in purified text. First handle font-related stuff: all of this needs to be
% disabled.
%    \begin{macrocode}
\tl_map_inline:nn
  {
    \fontencoding
    \fontfamily
    \fontseries
    \fontshape
  }
  { \text_declare_purify_equivalent:Nn #1 { \use_none:n } }
\text_declare_purify_equivalent:Nn \fontsize { \use_none:nn }
\text_declare_purify_equivalent:Nn \selectfont { }
\text_declare_purify_equivalent:Nn \usefont { \use_none:nnnn }
\tl_map_inline:nn
  {
    \emph
    \text
    \textnormal
    \textrm
    \textsf
    \texttt
    \textbf
    \textmd
    \textit
    \textsl
    \textup
    \textsc
    \textulc
  }
  { \text_declare_purify_equivalent:Nn #1 { \use:n } }
\tl_map_inline:nn
  {
    \normalfont
    \rmfamily
    \sffamily
    \ttfamily
    \bfseries
    \mdseries
    \itshape
    \scshape
    \slshape
    \upshape
    \em
    \Huge
    \LARGE
    \Large
    \footnotesize
    \huge
    \large
    \normalsize
    \scriptsize
    \small
    \tiny
  }
  { \text_declare_purify_equivalent:Nn #1 { } }
\exp_args:Nc \text_declare_purify_equivalent:Nn
  { @protected@testopt } { \use_none:nnn }
%    \end{macrocode}
% Environments have to be handled by pure expansion.
%
% \begin{macro}{\@@_end_env:n}
%    \begin{macrocode}
\text_declare_purify_equivalent:Nn \begin { \use:c }
\text_declare_purify_equivalent:Nn \end { \@@_end_env:n }
\cs_new:Npn \@@_end_env:n #1 { \cs:w end #1 \cs_end: }
%    \end{macrocode}
% \end{macro}
%
% Some common symbols and similar ideas.
%    \begin{macrocode}
\text_declare_purify_equivalent:Nn \\ { }
\tl_map_inline:nn
  { \{ \} \# \$ \% \_ }
  { \text_declare_purify_equivalent:Nx #1 { \cs_to_str:N #1 } }
%    \end{macrocode}
% Cross-referencing.
%    \begin{macrocode}
\text_declare_purify_equivalent:Nn \label { \use_none:n }
%    \end{macrocode}
% Spaces.
%    \begin{macrocode}
\group_begin:
\char_set_catcode_active:N \~
\use:n
  {
    \group_end:
    \text_declare_purify_equivalent:Nx ~ { \c_space_tl }
  }
\text_declare_purify_equivalent:Nn \nobreakspace { ~ }
\text_declare_purify_equivalent:Nn \  { ~ }
\text_declare_purify_equivalent:Nn \, { ~ }
%    \end{macrocode}
%
% \subsection{Accent and letter-like data for purifying text}
%
% \begin{macro}[rEXP]{\@@_purify_accent:NN}
%   During expansion we cannot deal with accents that are not pre-composed:
%   the $8$-bit engines need these leaving as commands for typesetting.
%   However, we now need to make those into real Unicode codepoints: they
%   come after the letter, so there is a shuffle as well as a change of
%   data.
%    \begin{macrocode}
\cs_new:Npn \@@_purify_accent:NN #1#2
  {
    \cs_if_exist:cTF
      { c_@@_purify_ \token_to_str:N #1 _ \token_to_str:N #2 _tl }
      {
        \exp_not:v
          { c_@@_purify_ \token_to_str:N #1 _ \token_to_str:N #2 _tl }
      }
      {
        \exp_not:n {#2}
        \exp_not:v { c_@@_purify_ \token_to_str:N #1 _tl }
      }
  }
\tl_map_inline:nn { \` \' \^ \~ \= \u \. \" \r \H \v \d \c \k \b \t }
  { \text_declare_purify_equivalent:Nn #1 { \@@_purify_accent:NN #1 } }
\group_begin:
  \cs_set_protected:Npn \@@_loop:Nn #1#2
    {
      \quark_if_recursion_tail_stop:N #1
      \tl_const:cx { c_@@_purify_ \token_to_str:N #1 _tl }
        { \codepoint_generate:nn {"#2} { \char_value_catcode:n { "#2 } } }
      \@@_loop:Nn
    }
  \@@_loop:Nn
    \` { 0300 }
    \' { 0301 }
    \^ { 0302 }
    \~ { 0303 }
    \= { 0304 }
    \u { 0306 }
    \. { 0307 }
    \" { 0308 }
    \r { 030A }
    \H { 030B }
    \v { 030C }
    \d { 0323 }
    \c { 0327 }
    \k { 0328 }
    \b { 0331 }
    \t { 0361 }
    \q_recursion_tail { }
    \q_recursion_stop
\group_end:
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
%
% \PrintIndex
